{
	"ML workflow":{
		"prefix": "workflow",
		"body": [
			"#untuk memudahkan mengerjakan ML supervised, bisa mengikuti workflow dengan mengetik seperti dibawah :",
			"#note: ketik salah satu aja yah buu pak",
			"",
			
			"#1. untuk import library",
			"#---> common library",
			"",

			"#2. untuk import data",
			"#---> data loading",
			"",

			"#3. untuk splitting data",
			"#---> shuffle split",
			"#---> stratified shuffle split",
			"",

			"#4. untuk pipepline",
			"#---> basic pipeline",
			"#---> advance pipeline",
			"",

			"#5.1. untuk model regresi",
			"#---> regresi KNN",
			"#---> regresi SVM",
			"#---> regresi RF",
			"#---> regresi XGBoost",
			"#---> regresi linreg",
			"#---> regresi elasticnet",
			"",

			"#5.2. untuk model klasifikasi",
			"#---> klasifikasi KNN",
			"#---> klasifikasi SVM",
			"#---> klasifikasi RF",
			"#---> klasifikasi XGBoost",
			"#---> klasifikasi logreg",
			"",

			"#6. untuk tuning",
			"#---> search grid",
			"#---> search randomized",
			"#---> search bayesian",
			"",

			"#7. untuk save model",
			"#---> save basic model",
			"#---> save best model"
		]
	},

	"Import common packages":{
		"prefix": "common library",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"",
			"from sklearn.model_selection import train_test_split",
			"from sklearn.pipeline import Pipeline",
			"from sklearn.compose import ColumnTransformer",
			"",
			"from jcopml.pipeline import num_pipe, cat_pipe",
			"from jcopml.utils import save_model, load_model",
			"from jcopml.plot import plot_missing_value",
			"from jcopml.feature_importance import mean_score_decrease"
		]
	},

	"Import csv data":{
		"prefix": "data loading",
		"body": [
			"df = pd.read_csv(\"____________\", index_col=\"___________\", parse_dates=[\"____________\"])",
			"df.head()"
		]
	},

	"Shuffle Split":{
		"prefix" : "shuffle Split",
		"body" :[
			"X = df.drop(columns=\"___________\")",
			"y = df[\"_____________\"]",
			"",
			"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)",
			"X_train.shape, X_test.shape, y_train.shape, y_test.shape"                        
		]
	},

	"Stratified Shuffle Split":{
		"prefix" : "stratified shuffle split",
		"body": [
			"X = df.drop(columns=\"___________\")",
			"y = df[\"_____________\"]",
			"",
			"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)",
			"X_train.shape, X_test.shape, y_train.shape, y_test.shape"                        
		]
	},



	"Common Pipeline Preprocessor":{
		"prefix" : "pipeline basic",
		"body": [
			"preprocessor = ColumnTransformer([",
			"    ('numeric', num_pipe(), [\"______________\"]),",
			"    ('categoric', cat_pipe(encoder='onehot'), [\"_____________\"]),",
			"])"
		]
	},

	"Advance Pipeline Preprocessor":{
		"prefix" : "pipeline advance",
		"body": [
			"# Note: You could not use gsp, rsp, and bsp recommendation in advance mode",
			"# You should specify your own parameter grid / interval when tuning",                        
			"preprocessor = ColumnTransformer([",
			"    ('numeric1', num_pipe(impute='mean', poly=2, scaling='standard', transform='yeo-johnson'), [\"______________\"]),",
			"    ('numeric2', num_pipe(impute='median', poly=2, scaling='robust'), [\"______________\"]),",
			"    ('categoric1', cat_pipe(encoder='ordinal'), [\"_____________\"]),",
			"    ('categoric2', cat_pipe(encoder='onehot'), [\"_____________\"])    ",
			"])"
		]
	},





	"Regression for K-Nearest Neighbor (KNN)":{
		"prefix" : "regresi KNN",
		"body": [
			"from sklearn.neighbors import KNeighborsRegressor",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', KNeighborsRegressor())",
			"])"
		]
	},


	"Regression for Support Vector Machine (SVM)":{
		"prefix" : "regresi SVM",
		"body": [
			"from sklearn.svm import SVR",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', SVR(max_iter=500))",
			"])"
		]
	},


	"Regression for Random Forest (RF)":{
		"prefix" : "regresi RF",
		"body": [
			"from sklearn.ensemble import RandomForestRegressor",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', RandomForestRegressor(n_jobs=-1, random_state=42))",
			"])"
		]
	},


	"Regression for Extreme Gradient Boosting (XGBoost)":{
		"prefix" : "regresi XGBoost",
		"body": [
			"from xgboost import XGBRegressor",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', XGBRegressor(n_jobs=-1, random_state=42))",
			"])"
		]
	},


	"Regression for Linear Regression":{
		"prefix" : "regresi linreg",
		"body": [
			"from sklearn.linear_model import LinearRegression",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', LinearRegression())",
			"])"
		]
	},


	"Regression for ElasticNet Regression":{
		"prefix" : "regresi elasticnet",
		"body": [
			"from sklearn.linear_model import ElasticNet",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', ElasticNet())",
			"])"
		]
	},







	"Classification for K-Nearest Neighbor (KNN)":{
		"prefix" : "klasifikasi KNN",
		"body": [
			"from sklearn.neighbors import KNeighborsClassifier",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', KNeighborsClassifier())",
			"])"
		]
	},


	"Classification for Support Vector Machine (SVM)":{
		"prefix" : "klasifikasi SVM",
		"body": [
			"from sklearn.svm import SVC",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', SVC(max_iter=500))",
			"])"
		]
	},


	"Classification for Random Forest (RF)":{
		"prefix" : "klasifikasi RF",
		"body": [
			"from sklearn.ensemble import RandomForestClassifier",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', RandomForestClassifier(n_jobs=-1, random_state=42))",
			"])"
		]
	},


	"Classification for Extreme Gradient Boosting (XGBoost)":{
		"prefix" : "klasifikasi XGBoost",
		"body": [
			"from xgboost import XGBClassifier",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', XGBClassifier(n_jobs=-1, random_state=42))",
			"])"
		]
	},


	"Classification for Logistic Regression":{
		"prefix" : "klasifikasi logreg",
		"body": [
			"from sklearn.linear_model import LogisticRegression",
			"pipeline = Pipeline([",
			"    ('prep', preprocessor),",
			"    ('algo', LogisticRegression(solver='lbfgs', n_jobs=-1, random_state=42))",
			"])"
		]
	},









	"Grid Search":{
		"prefix" : "search grid",
		"body": [
			"from sklearn.model_selection import GridSearchCV",
			"from jcopml.tuning import grid_search_params as gsp",
			"",
			"model = GridSearchCV(pipeline, gsp.\"_______________\", cv=\"___\", scoring='___', n_jobs=-1, verbose=1)",
			"model.fit(X_train, y_train)",
			"",
			"print(model.best_params_)",
			"print(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))"
		]
	},


	"Randomized Search":{
		"prefix" : "search randomized",
		"body": [
			"from sklearn.model_selection import RandomizedSearchCV",
			"from jcopml.tuning import random_search_params as rsp",
			"",
			"model = RandomizedSearchCV(pipeline, rsp.\"_______________\", cv=\"___\", scoring='___', n_iter=\"___\", n_jobs=-1, verbose=1, random_state=42)",
			"model.fit(X_train, y_train)",
			"",
			"print(model.best_params_)",
			"print(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))"
		]
	},


	"Bayesian Search":{
		"prefix" : "search bayesian",
		"body": [
			"from jcopml.tuning.skopt import BayesSearchCV",
			"from jcopml.tuning import bayes_search_params as bsp",
			"",
			"model = BayesSearchCV(pipeline, bsp.\"_______________\", cv=\"___\", scoring=\"__\", n_iter=\"___\", n_jobs=-1, verbose=1, random_state=42)",
			"model.fit(X_train, y_train)",
			"",
			"print(model.best_params_)",
			"print(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))"
		]
	},






	"Save the whole search object":{
		"prefix" : "save basic model",
		"body": ["save_model(model, \"__________.pkl\")"]
	},


	"Save best estimator only":{
		"prefix" : "save best model",
		"body": ["save_model(model.best_estimator_, \"__________.pkl\")"]
	}
}    
